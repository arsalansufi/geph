#!/bin/python

import faker
import random
import string
import subprocess
import sys


# constants ===================================================================

OUTPUT_PATH = '/tmp/cs438-afc33-aas85/'
OWNER = 'afc33'

# Percentage of total possible edges created
GRAPH_DENSITY	= 0.01
MIL		= 1000000

NODE_TABLE_NAME = 'nodes'
EDGE_TABLE_NAME = 'edges'

NAME_LENGTH_MAX     = 50
EMAIL_LENGTH_MAX    = 50
PASSWORD_LENGTH_MAX = 50
BIO_LENGTH_MAX      = 250

PASSWORD_LENGTH_MIN = 6
PASSWORD_LENGTH_AVG = 12
PASSWORD_LENGTH_SD  = 3
PASSWORD_CHAR_SET   = string.lowercase + string.uppercase + string.digits

BIO_LENGTH_MIN = 5
BIO_LENGTH_AVG = 100
BIO_LENGTH_SD  = 50
BIO_PROB_NULL  = 0.2

FAKER = faker.Factory.create()


# main function ===============================================================

def main():
    # Process command-line arguments.
    if (   len(sys.argv) != 3
        or not sys.argv[1].isdigit()
        or not sys.argv[2].isdigit()
       ):
        sys.stdout.write(
            'usage: generate <num nodes (mil) to generate> '
                            '<num edges (mil) to generate>\n'
        )
        return
    num_nodes = int(sys.argv[1])
    num_edges = int(sys.argv[2])

    file_path = OUTPUT_PATH + str(num_nodes) + 'x' + str(num_edges) + '.sql'

    f = open(file_path, 'w')

    # Insert initial commands to set up database
    f.write(str_pre_copy_edges.format(OWNER))

    # Insert edges into edge table.
    sys.stdout.write("Adding edges\n")
    for _ in xrange(num_edges*MIL):
        f.write(gen_csv_edge(num_nodes*MIL))

    # Insert nodes into sql file
    sys.stdout.write("Adding nodes\n")
    f.write(str_pre_copy_nodes.format(OWNER))
    for i in range(1, num_nodes*MIL + 1):
        f.write(gen_csv_node(i))

    # Add appending structures to table script
    f.write(str_post_copy_nodes.format(OWNER))

    f.close()
    return


# node and edge generating helper functions ===================================
def gen_csv_node(id_val):
    node_list = (str(id_val),
                 FAKER.firstName(),
                 FAKER.lastName(),
                 FAKER.email(),
                 gen_password(),
                 FAKER.date(),
                 gen_bio())
    return '\t'.join(node_list) + '\n'



def gen_password():
    return gen_random_str(my_randint(PASSWORD_LENGTH_MIN,
                                     PASSWORD_LENGTH_MAX,
                                     PASSWORD_LENGTH_AVG,
                                     PASSWORD_LENGTH_SD),
                          PASSWORD_CHAR_SET)


def gen_bio():
    if random.random() < BIO_PROB_NULL:
        return 'NULL'
    return FAKER.text(my_randint(BIO_LENGTH_MIN,
                                 BIO_LENGTH_MAX,
                                 BIO_LENGTH_AVG,
                                 BIO_LENGTH_SD))


def gen_csv_edge(total_num_nodes):
    nodes = random.sample(xrange(total_num_nodes + 1), 2)
    n0 = str(nodes[0])
    n1 = str(nodes[1])
    t = str(FAKER.dateTimeThisYear())
    return n0 + '\t' + n1 + '\t' + t + '\n' + \
           n1 + '\t' + n0 + '\t' + t + '\n'


# string constant helper functions ============================================
str_pre_copy_edges = """
--
-- PostgreSQL database dump
--

-- Dumped from database version 9.5.2
-- Dumped by pg_dump version 9.5.2

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: edges; Type: TABLE; Schema: public; Owner: {0}
--

CREATE TABLE edges (
    node_1 integer NOT NULL,
    node_2 integer NOT NULL,
    "timestamp" timestamp without time zone
);


ALTER TABLE edges OWNER TO {0};

--
-- Name: nodes; Type: TABLE; Schema: public; Owner: {0}
--

CREATE TABLE nodes (
    id integer NOT NULL,
    first_name character varying(50) NOT NULL,
    last_name character varying(50) NOT NULL,
    email character varying(50) NOT NULL,
    password character varying(50) NOT NULL,
    birthday date NOT NULL,
    bio character varying(250)
);


ALTER TABLE nodes OWNER TO {0};

--
-- Name: nodes_id_seq; Type: SEQUENCE; Schema: public; Owner: {0}
--

CREATE SEQUENCE nodes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nodes_id_seq OWNER TO {0};

--
-- Name: nodes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: {0}
--

ALTER SEQUENCE nodes_id_seq OWNED BY nodes.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: {0}
--

ALTER TABLE ONLY nodes ALTER COLUMN id SET DEFAULT nextval('nodes_id_seq'::regclass);


--
-- Data for Name: edges; Type: TABLE DATA; Schema: public; Owner: {0}
--

COPY edges (node_1, node_2, "timestamp") FROM stdin;
"""

str_pre_copy_nodes = """\.


--
-- Data for Name: nodes; Type: TABLE DATA; Schema: public; Owner: {0}
--

COPY nodes (id, first_name, last_name, email, password, birthday, bio) FROM stdin;
"""

str_post_copy_nodes = """\.


--
-- Name: nodes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: {0}
--

SELECT pg_catalog.setval('nodes_id_seq', 1539144, true);


--
-- Name: edges_pkey; Type: CONSTRAINT; Schema: public; Owner: {0}
--

ALTER TABLE ONLY edges
    ADD CONSTRAINT edges_pkey PRIMARY KEY (node_1, node_2);


--
-- Name: nodes_email_password_key; Type: CONSTRAINT; Schema: public; Owner: {0}
--

ALTER TABLE ONLY nodes
    ADD CONSTRAINT nodes_email_password_key UNIQUE (email, password);


--
-- Name: nodes_pkey; Type: CONSTRAINT; Schema: public; Owner: {0}
--

ALTER TABLE ONLY nodes
    ADD CONSTRAINT nodes_pkey PRIMARY KEY (id);


--
-- Name: public; Type: ACL; Schema: -; Owner: {0}
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM {0};
GRANT ALL ON SCHEMA public TO {0};
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--
"""

# general helper functions ====================================================



def gen_random_str(length, char_set):
    chars = [random.choice(char_set) for _ in xrange(length)]
    return ''.join(chars)


def my_randint(n_min, n_max, n_avg, n_sd):
    base = random.gauss(n_avg, n_sd)
    bounded = min(max(base, n_min), n_max)
    return int(round(bounded))


if __name__ == '__main__':
    main()


